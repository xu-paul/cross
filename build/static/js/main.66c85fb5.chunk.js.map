{"version":3,"sources":["Square.js","Board.js","Game.js","index.js"],"names":["Square","state","value","className","onClick","this","props","React","Component","Board","i","squares","renderSquare","calculateWinner","lines","length","a","b","c","Game","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"yMAeeA,E,YAbX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,MAAM,MAHD,E,sEAOT,OACI,4BAAQC,UAAU,SAASC,QAASC,KAAKC,MAAMF,SAAUC,KAAKC,MAAMJ,W,GAT3DK,IAAMC,WCgCZC,E,qLA5BEC,GAAG,IAAD,OACX,OACI,kBAAC,EAAD,CAAQR,MAAOG,KAAKC,MAAMK,QAAQD,GAAIN,QAAS,kBAAK,EAAKE,MAAMF,QAAQM,Q,+BAI3E,OACI,6BACI,yBAAKP,UAAU,aACVE,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,IAEvB,yBAAKT,UAAU,aACVE,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,IAEvB,yBAAKT,UAAU,aACVE,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,S,GAvBnBL,IAAMC,WCyF1B,SAASK,EAAgBF,GAWrB,IAVA,IAAMG,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFJ,EAAI,EAAGA,EAAII,EAAMC,OAAQL,IAAK,CAAC,IAAD,cACjBI,EAAMJ,GADW,GAC5BM,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIP,EAAQK,IAAML,EAAQK,KAAOL,EAAQM,IAAMN,EAAQK,KAAOL,EAAQO,GAClE,OAAOP,EAAQK,GAGvB,OAAO,KAIIG,M,YA9GX,WAAYb,GAAQ,IAAD,8BACf,4CAAMA,KACDL,MAAQ,CACTmB,QAAS,CACL,CACIT,QAASU,MAAM,GAAGC,KAAK,QAG/BC,WAAY,EACZC,SAAS,GATE,E,yEAaPd,GACR,IAAMU,EAAUf,KAAKJ,MAAMmB,QAAQK,MAAM,EAAGpB,KAAKJ,MAAMsB,WAAa,GAE9DZ,EADUS,EAAQA,EAAQL,OAAS,GACjBJ,QAAQc,QAC5BZ,EAAgBF,IAAYA,EAAQD,KAGxCC,EAAQD,GAAKL,KAAKJ,MAAMuB,QAAU,IAAM,IACxCnB,KAAKqB,SAAS,CACVN,QAASA,EAAQO,OAAO,CACpB,CACIhB,QAASA,KAGjBY,WAAYH,EAAQL,OACpBS,SAAUnB,KAAKJ,MAAMuB,a,6BAItBI,GACHvB,KAAKqB,SAAS,CACVH,WAAYK,EACZJ,QAAUI,EAAO,IAAO,IAGhB,IAATA,GACCvB,KAAKqB,SAAS,CACVN,QAAS,CACL,CACIT,QAASU,MAAM,GAAGC,KAAK,Y,+BAQjC,IAgBFO,EAhBC,OAECC,EADUzB,KAAKJ,MAAMmB,QACHf,KAAKJ,MAAMsB,YAC7BQ,EAASlB,EAAgBiB,EAAQnB,SAEjCqB,EAAQ3B,KAAKJ,MAAMmB,QAAQa,KAAI,SAACL,EAAMM,GACxC,IAAMC,EAAOD,EACT,eAAiBA,EACjB,UACJ,OACI,wBAAIE,IAAKF,GACL,4BAAQ9B,QAAS,kBAAM,EAAKiC,OAAOH,KAAQC,OAYvD,OALIN,EADAE,EACS,WAAaA,EAEb,iBAAmB1B,KAAKJ,MAAMuB,QAAU,IAAM,KAIvD,yBAAKrB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIQ,QAASmB,EAAQnB,QACjBP,QAAS,SAAAM,GAAC,OAAI,EAAK4B,YAAY5B,OAGvC,yBAAKP,UAAU,aACX,6BAAM0B,GACN,4BAAKG,S,GApFNzB,IAAMC,W,MCGzB+B,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.66c85fb5.chunk.js","sourcesContent":["import React from 'react';\r\nclass Square extends React.Component{ \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            value:null\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <button className=\"square\" onClick={this.props.onClick}>{this.props.value}\r\n            </button>\r\n        )\r\n    }\r\n}\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends React.Component{  \r\n\r\n    renderSquare(i){\r\n        return(\r\n            <Square value={this.props.squares[i]} onClick={() =>this.props.onClick(i)}/>  \r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './Board';\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null)\r\n                }\r\n            ],\r\n            stepNumber: 0,\r\n            xIsNext: true\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        this.setState({\r\n            history: history.concat([\r\n                {\r\n                    squares: squares\r\n                }\r\n            ]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n\r\n        });\r\n        if(step === 0){\r\n            this.setState({\r\n                history: [\r\n                    {\r\n                        squares: Array(9).fill(null)\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = this.state.history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move :\r\n                'restart';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = \"Winner: \" + winner;\r\n        } else {\r\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={i => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game'\nimport './index.css';\n\nReactDOM.render(\n    <Game/>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}